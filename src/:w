use std::fmt::Display;

use bstr::ByteSlice;

use crate::helper::parsing::IntoColumns;

pub fn part1(input: &str) -> impl Display {
    let input = "30373
25512
65332
33549
35390";
    let rows = input.lines().collect::<Vec<_>>();
    let columns = input.lines().into_columns().collect::<Vec<_>>();
    let nrows = rows.len();
    let ncols = columns.len();

    let mut visible = 0;

    for (ri, r) in rows.iter().enumerate() {
        'row: for (ci, t) in r.chars().enumerate() {
            if ri == 0 || ri == nrows - 1 {
                visible += 1;
                continue;
            }
            if ci == 0 || ci == ncols - 1 {
                visible += 1;
                continue;
            }

            visible += 1;
            for (oi, o) in rows[ci].chars().take(ri - 1).enumerate() {
                if o >= t {
                    visible -= 1;
                    continue 'row;
                }
            }
            for (oi, o) in rows[ci].chars().skip(ri - 1).enumerate() {
                if o >= t {
                    visible -= 1;
                    continue 'row;
                }
            }
            for (oi, o) in columns[ri].chars().take(ci - 1).enumerate() {
                if o >= t {
                    visible -= 1;
                    continue 'row;
                }
            }
            for (oi, o) in columns[ri].chars().skip(ci).enumerate() {
                if o >= t {
                    visible -= 1;
                    continue 'row;
                }
            }
        }
    }

    visible
}

pub fn part2(input: &str) -> impl Display {
    ""
}
